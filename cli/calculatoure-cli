#!/usr/bin/env node

var	calculatoure	= require('calculatoure').calculatoure,
	flags		= [],
	argv		= process.argv,
	version		= /*# result += version; */,
	red		= "\033[31m",
	green		= "\033[32m",
	blue		= "\033[34m",
	nocolor		= "\033[m",
	exiting		= false,
	defining	= null,
	output		= '',
	fs		= require('fs'),
	mode		= 10,
	fileStream,
	RLI,
	calculations,
	i,l;

function calculate(data){
	var result = calculatoure(String(data), mode);
	if (result.original){
		console.log(blue + result.original + nocolor);
		console.log(green + result.data + nocolor);
		saveOutput(result.original + '\n');
		saveOutput(result.data + '\n');
	} else {
		console.log(red + result.data + nocolor);
		saveOutput(result.data + '\n');
	}
}

function saveOutput(data){
	output += data;
	if (fileStream){
		fileStream.write(data);
	}
	return data;
}

function exitCLI(){
	process.stdin.pause();
	exiting = true;
	return 'Exiting...';
}

function chMode(m){
	m = Math.floor(Number(m));
	if (m > 1 && m < 17){
		mode = m;
		console.log('Set mode to ' + m + '.');
		saveOutput('Set mode to ' + m + '.\n');
	} else {
		console.log('Invalid mode (' + m + ').');
		saveOutput('Invalid mode ' + m + '().\n');
	}
	return m;
}

exitCLI.toString = exitCLI;

calculatoure.addFunction('exit', exitCLI);
calculatoure.addFunction('mode', chMode, 'mode(num) Changes output mode to base of num where 2 <= num <= 16.');

for (i=2, l=argv.length; i<l; i++){
	flags.push(argv[i]);
}

if ((i = flags.indexOf('--no-colors')) !== -1){
	flags.splice(i, 1);
	red = blue = green = nocolor;
}

if ((i = flags.indexOf('--output-to-file')) !== -1){
	flags.splice(i, 1);
	try{
		fileStream = fs.createWriteStream(flags[i], {
			encoding: 'UTF-8'
		});
		flags.splice(i, 1);
	} catch(e){
		console.log('Failed to open stream to write to file: ' + flags[i]);
		process.exit(256);
	}
}

if ((i = flags.indexOf('--help')) !== -1){
	flags.splice(i, 1);
	console.log('Usage: calculatoure [calculations] [flags]');
	console.log('If you leave calculations empty, a console will be opened.');
	console.log("It's a good idea to put your calculations in quotes.");
	console.log('Calculations are separated with a semicolon (;)');
	console.log('Flags:');
	console.log('\t--help\t\t\t\tShows this message.');
	console.log('\t--no-colors\t\t\tDisables colours.');
	console.log('\t--output-to-file <filename>\tWrites output to the filename specified.');
} else if (!flags.length){
	RLI = require('readline').createInterface(process.stdin, process.stdout, function(data){
		return [calculatoure.autoComplete(data) || [], data];
	});
	RLI.setPrompt('calc# ');
	function promptLoop(data){
		if (defining){
			try{
				var fn = new Function('var a = arguments[0]; return ' + data);
				calculatoure.addFunction(defining, fn);
				saveOutput(defining + '(a){\n\treturn ' + data + '\n}\n');
			} catch(e){
				console.log('Failed to define function ' + defining + '(a){\n\treturn ' + data + '\n}');
				saveOutput('Failed to define function ' + defining + '(a){\n\treturn ' + data + '\n}\n');
			}
			defining = null;
			RLI.setPrompt('calc# ');
			RLI.prompt();
			return;
		}
		var defineArgument = /^define ([\$a-z_][\$a-z_0-9]*)$/i.exec(data);
		
		if (defineArgument){
			defining = defineArgument[1];
			console.log('Define function using JavaScript syntax:');
			RLI.setPrompt('function ' + defining + ' (a): return ');
			RLI.prompt();
		} else {
			saveOutput('calc# ' + data + '\n');
			calculate(data);
			if (!exiting){
				RLI.prompt();
			}
		}
	}
	RLI.on('line', promptLoop);
	RLI.prompt();
} else {
	calculations = flags.join(' ').split(';');
	for (i=0, l=calculations.length; i<l; i++){
		calculate(calculations[i]);
	}
}
